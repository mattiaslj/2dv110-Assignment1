package gameOfSticks.tests;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import gameOfSticks.controller.PlayGame;
import gameOfSticks.model.Game;
import gameOfSticks.view.Console;

public class ControllerTests {

	PlayGame p;
	Game g;
	Console c;

	@Test
	public void shouldCreatePlayGame() { 
		p = new PlayGame();
	}
	
	@Test
	public void shouldPlayOne(){
		c = mock(Console.class);
		g = mock(Game.class);
		p = new PlayGame();
		
		when(c.getInput()).thenReturn(1);
		p.play(g, c);
		verify(c).getInput();
		assertTrue(p.play(g, c));
	}
	
	@Test
	public void shouldPlayTwo(){
		c = mock(Console.class);
		g = mock(Game.class);
		p = new PlayGame();
		
		when(c.getInput()).thenReturn(2);
		p.play(g, c);
		verify(c).getInput();
		assertTrue(p.play(g, c));
	}
	
	@Test
	public void shouldPlayThree(){
		c = mock(Console.class);
		g = mock(Game.class);
		p = new PlayGame();
		
		when(c.getInput()).thenReturn(3);
		p.play(g, c);
		verify(c).getInput();
		assertTrue(p.play(g, c));
	}
	
	@Test
	public void shouldQuitOnZero(){
		c = mock(Console.class);
		g = mock(Game.class);
		p = new PlayGame();
		
		when(c.getInput()).thenReturn(0);
		p.play(g, c);
		verify(c).getInput(); 
		assertFalse(p.play(g, c));
	}
	
	
	@Test
	public void shouldDisplayUserLose(){
		
		c = mock(Console.class);
		g = mock(Game.class);
		p = new PlayGame();
		
	//	when(g.restartGame())
		/*p.play(g, c);
		verify(g).restartGame();
		verify(c).youLose();*/
	
	}
	
	
	/*@Test
	public void shouldRestartGame(){
		c = mock(Console.class);
		g = mock(Game.class);
		p = new PlayGame();
		
		when(g.getSticksLeft() <= 1).thenAnswer(null);
	}*/
	 
	
	
}
